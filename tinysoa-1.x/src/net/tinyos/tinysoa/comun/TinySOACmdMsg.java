/*
 * "Copyright (c) 2005-2006 The Regents of the Centro de Investigación y de
 * Educación Superior de la ciudad de Ensenada, Baja California (CICESE).
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 * 
 * IN NO EVENT SHALL CICESE BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
 * SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF THIS
 * SOFTWARE AND ITS DOCUMENTATION, EVEN IF CICESE HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * CICESE SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND CICESE
 * HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
 * OR MODIFICATIONS."
 * 
 ******************************************************************************/

package net.tinyos.tinysoa.comun;

/*******************************************************************************
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TinySOACmdMsg'
 * message type.
 * 
 * @author		Edgardo Avilés López
 * @version	0.3, 07/24/2006
 ******************************************************************************/

public class TinySOACmdMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 11;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 25;

    /** Create a new TinySOACmdMsg of size 4. */
    public TinySOACmdMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TinySOACmdMsg of the given data_length. */
    public TinySOACmdMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinySOACmdMsg with the given data_length
     * and base offset.
     */
    public TinySOACmdMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinySOACmdMsg using the given byte array
     * as backing store.
     */
    public TinySOACmdMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinySOACmdMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TinySOACmdMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinySOACmdMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TinySOACmdMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinySOACmdMsg embedded in the given message
     * at the given base offset.
     */
    public TinySOACmdMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TinySOACmdMsg embedded in the given message
     * at the given base offset and length.
     */
    public TinySOACmdMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TinySOACmdMsg> \n";
      try {
        s += "  [datos=0x"+Long.toHexString(get_datos())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tipo=0x"+Long.toHexString(get_tipo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: datos
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'datos' is signed (false).
     */
    public static boolean isSigned_datos() {
        return false;
    }

    /**
     * Return whether the field 'datos' is an array (false).
     */
    public static boolean isArray_datos() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'datos'
     */
    public static int offset_datos() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'datos'
     */
    public static int offsetBits_datos() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'datos'
     */
    public int get_datos() {
        return (int)getUIntElement(offsetBits_datos(), 16);
    }

    /**
     * Set the value of the field 'datos'
     */
    public void set_datos(int value) {
        setUIntElement(offsetBits_datos(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'datos'
     */
    public static int size_datos() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'datos'
     */
    public static int sizeBits_datos() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tipo
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tipo' is signed (false).
     */
    public static boolean isSigned_tipo() {
        return false;
    }

    /**
     * Return whether the field 'tipo' is an array (false).
     */
    public static boolean isArray_tipo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tipo'
     */
    public static int offset_tipo() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tipo'
     */
    public static int offsetBits_tipo() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'tipo'
     */
    public short get_tipo() {
        return (short)getUIntElement(offsetBits_tipo(), 8);
    }

    /**
     * Set the value of the field 'tipo'
     */
    public void set_tipo(short value) {
        setUIntElement(offsetBits_tipo(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'tipo'
     */
    public static int size_tipo() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tipo'
     */
    public static int sizeBits_tipo() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'id'
     */
    public short get_id() {
        return (short)getUIntElement(offsetBits_id(), 8);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(short value) {
        setUIntElement(offsetBits_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 8;
    }

}
